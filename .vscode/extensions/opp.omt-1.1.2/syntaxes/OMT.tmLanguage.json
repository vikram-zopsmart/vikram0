{
	"information_for_contributors": [
		"This file has been converted from https://github.com/textmate/yaml.tmbundle/blob/master/Syntaxes/yaml.tmLanguage",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/textmate/yaml.tmbundle/commit/efc96efafe5e48480cf55a2ed124b388cbea4440",
	"name": "OMT",
	"scopeName": "source.omt",
	"patterns": [
		{
			"include": "#property"
		},
		{
			"match": "^---",
			"name": "entity.other.document.begin.omt"
		},
		{
			"match": "^\\.{3}",
			"name": "entity.other.document.end.omt"
		},
		{
			"include": "#node"
		},
		{
			"include": "#comment"
		}
	],
	"repository": {
		"omt-variable": {
			"patterns": [
				{
					"match": "(\\$(\\w+))",
					"name": "variable.omt"
				}
			]
		},
		"omt-storage": {
			"patterns": [
				{
					"match": "(VAR)",
					"name": "storage.omt"
				}
			]
		},
		"omt-string": {
			"patterns": [
				{
					"begin": "'",
					"end": "'",
					"name": "string.omt"
				}
			]
		},
		"omt-prefix": {
			"patterns": [
				{
					"begin": "<(?=\\S)",
					"end": ">",
					"name": "string.omt"
				}
			]
		},
		"omt-function": {
			"patterns": [
				{
					"begin": "@",
					"end": ";|:",
					"name": "entity.name.function.omt",
					"patterns": [
						{
							"include": "#omt-variable"
						},
						{
							"include": "#omt-string"
						},
						{
							"match": "(!nested|!dialog)",
							"name": "keyword.omt"
						}
					]
				}
			]
		},
		"omt-keywords": {
			"patterns": [
				{
					"match": "(actions|autonomous|base|bindings|bindTo|commands|declare|description|disabled|dynamicActionQuery|edit|export|graphs|icon|id|import|list|live|maxCardinality|menu|model|moduleName|multiple|onCancel|onChange|onCommit|onDone|onInit|onRequest|onRun|onSelect|onSessionStart|onStart|params|payload|precondition|prefixes|procedures|queries|query|returns|rules|services|title|type|value|variables|watchers)",
					"name": "keyword.omt, markup.underline.omt"
				}
			]
		},
		"odt-commands": {
			"patterns": [
				{
					"match": "(AND|BLANK_NODE|CAST|CATCH|CEIL|CHOOSE|CONCAT|CONTAINS|COUNT|CURRENT_DATETIME|CURRENT_DATE|DISTINCT|DIVIDE_BY|DURATION|ELEMENTS|EMPTY|EQUALS|ERROR|EVERY|EXISTS|FILTER|FIND_SUBJECTS|FIRST|FLOOR|FORMAT_DATE|FORMAT|GRAPH|GREATER_THAN_EQUALS|GREATER_THAN|HAS|IDENTITY|IF_EMPTY|INDEX_OF|IN|IRI|JOIN|JSON|LAST|LENGTH|LESS_THAN_EQUALS|LESS_THAN|LOG|LOWERCASE|MAP|MAX|MERGE|MINUS|MIN|NOT|ORDER_BY|OR|PICK|PLUS|REPEAT|REVERSE|ROUND|SKIP|SOME|SUBSTRING|SUM|TAKE|TIMES|TRAVERSE|TRIM|TRUNC|TYPE|UPPERCASE)",
					"name": "support.function.omt"
				}
			]
		},
		"odt-control": {
			"patterns": [
				{
					"match": "(COMMAND|CHOOSE|DEFINE|ELSE|END|IF|OTHERWISE|RETURN|QUERY|WHEN)",
					"name": "keyword.control.omt"
				}
			]
		},
		"block-collection": {
			"patterns": [
				{
					"include": "#block-list-item"
				},
				{
					"include": "#block-mapping"
				},
				{
					"include": "#omt-variable"
				},
				{
					"include": "#omt-storage"
				},
				{
					"include": "#omt-string"
				},
				{
					"include": "#comment"
				}
			]
		},
		"block-mapping": {
			"patterns": [
				{
					"include": "#block-pair"
				}
			]
		},
		"block-node": {
			"patterns": [
				{
					"include": "#block-scalar"
				},
				{
					"include": "#block-collection"
				},
				{
					"include": "#odt-commands"
				},
				{
					"include": "#odt-control"
				},
				{
					"include": "#omt-function"
				},
				{
					"include": "#omt-variable"
				}
			]
		},
		"block-pair": {
			"patterns": [
				{
					"begin": "\\?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.key-value.begin.omt"
						}
					},
					"end": "(?=\\?)|^ *(:)|(:)",
					"endCaptures": {
						"1": {
							"name": "punctuation.separator.key-value.mapping.omt"
						},
						"2": {
							"name": "invalid.illegal.expected-newline.omt"
						}
					},
					"name": "meta.block-mapping.omt",
					"patterns": [
						{
							"include": "#block-node"
						}
					]
				},
				{
					"begin": "(?x)\n                        (?=\n                            (?x:\n                                  [^\\s[-?:,\\[\\]{}#&*!|>'\"%@`]]\n                                | [?:-] \\S\n                            )\n                            (\n                                  [^\\s:]\n                                | : \\S\n                                | \\s+ (?![#\\s])\n                            )*\n                            \\s*\n                            :\n\t\t\t\t\t\t\t(\\s|$)\n                        )\n                    ",
					"end": "(?x)\n                        (?=\n                              \\s* $\n                            | \\s+ \\#\n                            | \\s* : (\\s|$)\n                        )\n                    ",
					"patterns": [
						{
							"include": "#omt-keywords"
						},
						{
							"begin": "(?x)\n                                  [^\\s[-?:,\\[\\]{}#&*!|>'\"%@`]]\n                                | [?:-] \\S\n                            ",
							"beginCaptures": {
								"0": {
									"name": "entity.name.tag.omt"
								}
							},
							"contentName": "entity.name.tag.omt",
							"end": "(?x)\n                                (?=\n                                      \\s* $\n                                    | \\s+ \\#\n                                    | \\s* : (\\s|$)\n                                )\n                            ",
							"name": "string.unquoted.plain.out.omt"
						}
					]
				},
				{
					"match": ":(?=\\s|$)",
					"name": "punctuation.separator.key-value.mapping.omt"
				},
				{
					"include": "#omt-prefix"
				}
			]
		},
		"block-scalar": {
			"begin": "(?:(\\|))([1-9])?([-+])?(.*\\n?)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.block.scalar.literal.omt"
				},
				"2": {
					"name": "constant.numeric.indentation-indicator.omt"
				},
				"3": {
					"name": "support.other.chomping-indicator.omt"
				},
				"4": {
					"patterns": [
						{
							"include": "#comment"
						}
					]
				}
			},
			"end": "^(?=\\S)|(?!\\G)",
			"patterns": [
				{
					"begin": "^([ ]+)(?! )",
					"end": "^(?!\\1|\\s*$)",
					"name": "string.unquoted.block.omt"
				}
			]
		},
		"block-list-item": {
			"begin": "(-)(.+)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.omt"
				},
				"2": {
					"patterns": [
						{
							"include": "#omt-variable"
						},
						{
							"include": "#comment"
						},
						{
							"include": "#omt-string"
						},
						{
							"match": "(\\(.*?\\))",
							"name": "entity.name.type.omt"
						}
					]
				}
			},
			"end": "(\\n)"
		},
		"comment": {
			"begin": "(?:(^[ \\t]*)|[ \\t]+)(?=#\\p{Print}*$)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.leading.omt"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"begin": "#",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.omt"
						}
					},
					"end": "\\n",
					"name": "comment.line.number-sign.omt, debug.background.omt"
				}
			]
		},
		"directive": {
			"begin": "^%",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.directive.begin.omt"
				}
			},
			"end": "(?=$|[ \\t]+($|#))",
			"name": "meta.directive.omt",
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "keyword.other.directive.omt.omt"
						},
						"2": {
							"name": "constant.numeric.omt-version.omt"
						}
					},
					"match": "\\G(omt)[ \\t]+(\\d+\\.\\d+)"
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.directive.tag.omt"
						},
						"2": {
							"name": "storage.type.tag-handle.omt"
						},
						"3": {
							"name": "support.type.tag-prefix.omt"
						}
					},
					"match": "(?x)\n                        \\G\n                        (TAG)\n                        (?:[ \\t]+\n                            ((?:!(?:[0-9A-Za-z\\-]*!)?))\n                            (?:[ \\t]+ (\n                                  !              (?x: %\\p{XDigit}{2} | [0-9A-Za-z\\-#;/?:@&=+$,_.!~*'()\\[\\]] )*\n                                | (?![,!\\[\\]{}]) (?x: %\\p{XDigit}{2} | [0-9A-Za-z\\-#;/?:@&=+$,_.!~*'()\\[\\]] )+\n                                )\n                            )?\n                        )?\n                    "
				},
				{
					"captures": {
						"1": {
							"name": "support.other.directive.reserved.omt"
						},
						"2": {
							"name": "string.unquoted.directive-name.omt"
						},
						"3": {
							"name": "string.unquoted.directive-parameter.omt"
						}
					},
					"match": "(?x) \\G (\\w+) (?:[ \\t]+ (\\w+) (?:[ \\t]+ (\\w+))? )?"
				},
				{
					"match": "\\S+",
					"name": "invalid.illegal.unrecognized.omt"
				}
			]
		},
		"node": {
			"patterns": [
				{
					"include": "#block-node"
				}
			]
		},
		"property": {
			"begin": "(?=!|&)",
			"end": "(?!\\G)",
			"name": "meta.property.yaml",
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "keyword.control.property.anchor.yaml"
						},
						"2": {
							"name": "punctuation.definition.anchor.yaml"
						},
						"3": {
							"name": "entity.name.type.anchor.yaml"
						},
						"4": {
							"name": "invalid.illegal.character.anchor.yaml"
						}
					},
					"match": "\\G((&))([^\\s\\[\\]/{/},]+)(\\S+)?"
				},
				{
					"match": "(?x)\n                        \\G\n                        (?:\n                            ! < (?: %\\p{XDigit}{2} | [0-9A-Za-z\\-#;/?:@&=+$,_.!~*'()\\[\\]] )+ >\n                          | (?:!(?:[0-9A-Za-z\\-]*!)?) (?: %\\p{XDigit}{2} | [0-9A-Za-z\\-#;/?:@&=+$_.~*'()] )+\n                          | !\n                        )\n                        (?=\\ |\\t|$)\n                    ",
					"name": "entity.name.class.yaml"
				},
				{
					"match": "\\S+",
					"name": "invalid.illegal.tag-handle.yaml"
				}
			]
		}
	}
}